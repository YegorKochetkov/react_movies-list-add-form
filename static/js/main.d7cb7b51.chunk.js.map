{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","urlPattern","NewMovie","onAddMovie","useState","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","errorMessageForTitle","setErrorMessageForTitle","errorMessageForImgUrl","setErrorMessageForImgUrl","errorMessageForImdbUrl","setErrorMessageForImdbUrl","errorMessageForImdbId","setErrorMessageForImdbId","isFormValid","setFormValid","wholeFormValidation","errors","isValidInputs","every","input","isNoErrors","error","method","name","onSubmit","event","preventDefault","classNames","type","placeholder","value","onChange","currentTitle","target","onBlur","trim","currentImgUrl","test","currentImdbUrl","currentImdbId","disabled","App","moviesFromServer","setMovie","some","currMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7cb7b51.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import {\n  FC,\n  FormEvent,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void\n};\n\n// eslint-disable-next-line max-len\nconst urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: FC<Props> = ({ onAddMovie }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [errorMessageForTitle, setErrorMessageForTitle] = useState('');\n  const [errorMessageForImgUrl, setErrorMessageForImgUrl] = useState('');\n  const [errorMessageForImdbUrl, setErrorMessageForImdbUrl] = useState('');\n  const [errorMessageForImdbId, setErrorMessageForImdbId] = useState('');\n  const [isFormValid, setFormValid] = useState(false);\n\n  const wholeFormValidation = () => {\n    const inputs = [\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId];\n\n    const errors = [\n      errorMessageForImdbId,\n      errorMessageForImdbUrl,\n      errorMessageForImgUrl,\n      errorMessageForTitle];\n\n    const isValidInputs = inputs.every((input) => input !== '');\n    const isNoErrors = errors.every((error) => error === '');\n\n    if (isValidInputs && isNoErrors) {\n      setFormValid(true);\n    } else {\n      setFormValid(false);\n    }\n  };\n\n  const titleValidation = () => {\n    if (!title.trim()) {\n      setErrorMessageForTitle('Please enter a title');\n      wholeFormValidation();\n\n      return false;\n    }\n\n    setErrorMessageForTitle('');\n    wholeFormValidation();\n\n    return true;\n  };\n\n  const imdbUrlValidation = () => {\n    if (!imdbUrl.trim() || !urlPattern.test(imdbUrl)) {\n      setErrorMessageForImdbUrl('Please enter a valid link');\n      wholeFormValidation();\n\n      return false;\n    }\n\n    setErrorMessageForImdbUrl('');\n    wholeFormValidation();\n\n    return true;\n  };\n\n  const imgUrlValidation = () => {\n    if (!imgUrl.trim() || !urlPattern.test(imgUrl)) {\n      setErrorMessageForImgUrl('Please enter a valid link');\n      wholeFormValidation();\n\n      return false;\n    }\n\n    setErrorMessageForImgUrl('');\n    wholeFormValidation();\n\n    return true;\n  };\n\n  const imdbIdValidation = () => {\n    if (!imdbId.trim()) {\n      setErrorMessageForImdbId('Please enter a valid id');\n      wholeFormValidation();\n\n      return false;\n    }\n\n    setErrorMessageForImdbId('');\n    wholeFormValidation();\n\n    return true;\n  };\n\n  const submitForm = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAddMovie({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setFormValid(false);\n  };\n\n  const handleTitle = (currentTitle: string) => {\n    setTitle(currentTitle);\n    setErrorMessageForTitle('');\n  };\n\n  const handleImgUrl = (currentImgUrl: string) => {\n    setImgUrl(currentImgUrl);\n    setErrorMessageForImgUrl('');\n  };\n\n  const handleImdbUrl = (currentImdbUrl: string) => {\n    setImdbUrl(currentImdbUrl);\n    setErrorMessageForImdbUrl('');\n  };\n\n  const handleImdbId = (currentImdbId: string) => {\n    setImdbId(currentImdbId);\n    setErrorMessageForImdbId('');\n  };\n\n  return (\n    <form\n      className=\"app-form\"\n      method=\"post\"\n      name=\"onAdd\"\n      onSubmit={submitForm}\n    >\n      <h1 className=\"app-form__title\">Add new movie</h1>\n\n      <label className=\"app-form__field\">\n        <h2>Title</h2>\n        <input\n          className={classNames(\n            'app-form__input',\n            { 'app-form__input--error': errorMessageForTitle },\n          )}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Idiocracy\"\n          value={title}\n          onChange={({ target }) => {\n            handleTitle(target.value);\n          }}\n          onBlur={titleValidation}\n        />\n        <span\n          className=\"app-form__error\"\n        >\n          {errorMessageForTitle}\n        </span>\n      </label>\n\n      <label className=\"app-form__field\">\n        <h2>Description</h2>\n        <textarea\n          className=\"app-form__input\"\n          name=\"description\"\n          placeholder=\"Prophetic film...\"\n          value={description}\n          onChange={({ target }) => setDescription(target.value)}\n        />\n      </label>\n\n      <label className=\"app-form__field\">\n        <h2>Poster</h2>\n        <input\n          className={classNames(\n            'app-form__input',\n            { 'app-form__input--error': errorMessageForImgUrl },\n          )}\n          type=\"text\"\n          name=\"imgUrl\"\n          placeholder=\"https://m.media-amazon.com/images/\"\n          value={imgUrl}\n          onChange={({ target }) => {\n            handleImgUrl(target.value);\n          }}\n          onBlur={imgUrlValidation}\n        />\n        <span\n          className=\"app-form__error\"\n        >\n          {errorMessageForImgUrl}\n        </span>\n      </label>\n\n      <label className=\"app-form__field\">\n        <h2>IMDB link</h2>\n        <input\n          className={classNames(\n            'app-form__input',\n            { 'app-form__input--error': errorMessageForImdbUrl },\n          )}\n          type=\"text\"\n          name=\"imdbUrl\"\n          placeholder=\"https://www.imdb.com/title\"\n          value={imdbUrl}\n          onChange={({ target }) => {\n            handleImdbUrl(target.value);\n          }}\n          onBlur={imdbUrlValidation}\n        />\n        <span\n          className=\"app-form__error\"\n        >\n          {errorMessageForImdbUrl}\n        </span>\n      </label>\n\n      <label className=\"app-form__field\">\n        <h2>IMDB id</h2>\n        <input\n          className={classNames(\n            'app-form__input',\n            { 'app-form__input--error': errorMessageForImdbId },\n          )}\n          type=\"text\"\n          name=\"imdbId\"\n          placeholder=\"tt1234567\"\n          value={imdbId}\n          onChange={({ target }) => {\n            handleImdbId(target.value);\n          }}\n          onBlur={imdbIdValidation}\n        />\n        <span\n          className=\"app-form__error\"\n        >\n          {errorMessageForImdbId}\n        </span>\n      </label>\n\n      <button\n        className=\"app-form__btn\"\n        type=\"submit\"\n        name=\"submit\"\n        disabled={!isFormValid}\n      >\n        Add movie\n      </button>\n    </form>\n  );\n};\n","import {\n  FC,\n  useState,\n} from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: FC = () => {\n  const [movies, setMovie] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    const isAdded = movies\n      .some((currMovie) => currMovie.imdbId === movie.imdbId);\n\n    if (!isAdded) {\n      setMovie([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAddMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}